:orphan:

Classes and functions in pyml
============================================================
pyml.common
--------------------------------
pyml.common.structure.Structure
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: python

    class pyml.common.structure.Structure
        (axis, positions, n_atoms, elements=None, types=None, volume=None)

* Parameters
    | axis: (3x3) 
    | positions: (3xN_atom)
    | n_atoms: (N_type)
    | elements: (N_atom)
    | type: (N_atom)

.. code-block:: python

    def get_axis()
    def get_positions()
    def get_positions_cartesian()
    def get_n_atoms()
    def get_elements()
    def get_types()
    def get_volume()
    def get_neighbors()
        return dis, diff, atom_index
    def calc_neighbors(cutoff)

pyml.common.readvasp.Vasprun
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: python

    class pyml.common.readvasp.Vasprun(name)

.. code-block:: python

    def get_energy()
    def get_forces()
    def get_stress()
    def get_structure()
        return axis, positions, n_atoms, volume, elements, types

pyml.common.readvasp.Poscar
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: python

    class pyml.common.readvasp.Poscar(poscar_name)

.. code-block:: python

    def get_structure()
        return axis, positions, n_atoms, elements, types


pyml.common.fileio.InputParams
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: python

    class pyml.common.fileio.InputParams(fname)

.. code-block:: python

    def get_param(name, default=None)
    def get_param_array(name, default=None, size=None)
    def get_descriptor_param(name)

pyml.linpot.model
--------------------------------

pyml.linpot.model.Terms
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: python

    class pyml.linpot.model.Terms
        (st, cutoff, des_type, des_params, 
        model_type=1, force=False, maxp=3, maxl=0)

* Parameters
    | st: a structure (class Structure)
    | cutoff: cutoff radius (ang)
    | des_type: "gaussian" or "gaussian_afs"
    | des_params: parameters in Gaussian functions [[a1,b1], [a2, b2], ...]
    | model_type: 1 or 2
    | force: computing xf (1) or not (0)
    | maxp: maximum power of polynomials
    | maxl: maximum l value of afs

.. code-block:: python

    def get_x()
        return xe_sum, xf_sum # n_coeff, 3*n_atom x n_coeff

pyml.linpot.regression
--------------------------------

pyml.linpot.regression.CollectDescriptors
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: python

    class pyml.linpot.regression.CollectDescriptors
        (st_set, cutoff, des_type, des_params, model_type, wforce, maxp, maxl)

.. code-block:: python

    def get_x()
        return xe, xf # n_st x n_coeff, n_st*3*n_atom x n_coeff
    

pyml.linpot.regression.LinearRegression
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: python

    class pyml.linpot.regression.LinearRegression
        (params=None, readdata='vasprun', binary_filename='pyml_train_data')

* Parameters
    | params: an object of class InputParams (needed if readdata=="vasprun")
    | readdata: "vasprun" or "binary"
    | binary_filename: binary filename (needed if readdata=="binary")

* Attributes
    | e_train, e_test
    | f_train, f_test
    | s_train, s_test
    | xe_train, xe_test
    | xf_train, xf_test
    | xs_train, xs_test
    | x_train, x_test
    | y_train, y_test
    | scaler
    | best_reg
    | best_rmse
    | best_alpha
    | cutoff, des_tyep, des_params, model_type, maxp, maxl

.. code-block:: python

    def ridge(alpha_min=-5.0, alpha_max=-2.0, n_alpha=20, iprint=True)
    def save_pot(file_name='pyml_pot')
    def save_pot_for_lammps(file_name='lammps.mlip')
    def save_data(file_name='pyml_train_data')
    def load_data(file_name='pyml_train_data')

    def get_best_rmse_energy()
        return rmse_train, rmse_test
    def get_best_rmse_force()
        return rmse_train, rmse_test

    def get_input_params()
    def get_training_data()
    def replace_training_energy_data(xe_train, e_train)
    def set_data
        (xe_train, xe_test, e_train, e_test, 
         xf_train, xf_test, f_train, f_test, 
         cutoff, des_type, des_params, model_type, maxp, maxl, wforce)

pyml.linpot.prediction
--------------------------------

pyml.linpot.prediction.Property
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: python

    class pyml.linpot.prediction.Property
        (self, reg, scaler, cutoff, des_type, des_params, 
         model_type, force, maxp, maxl, file_poscar='POSCAR')

.. code-block:: python

    def get_energy()
    def get_force()

pyml.linpot.prediction.PropertyFromStructure
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: python

    class pyml.linpot.prediction.PropertyFromStructure
        (self, reg, scaler, cutoff, des_type, des_params, 
         model_type, force, maxp, maxl, st)

.. code-block:: python

    def get_energy()
    def get_force()

pyml.linpot.prediction.NumericalForce
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: python

    class pyml.linpot.prediction.NumericalForce
        (self, reg, scaler, cutoff, des_type, des_params, 
         model_type, maxp, maxl, file_poscar='POSCAR')

.. code-block:: python

    def get_numerical_force()
    def get_diff()

pyml.linpot.analysis
--------------------------------
Coming soon.

pymlcpp
--------------------------------

pymlcpp.PotentialModel
^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: python

    class pyml.PotentialModel
        (dis_array, diff_array, atom_index_array, des_params, cutoff, force)

.. code-block:: python

    def gaussian()
    def gaussian(scale)  # for lammps
    def afs(maxl)
    def afs(maxl, scale)  # for lammps
    def model2(maxp)

    def get_de() # n_atom x n_des
    def get_df() # n_atom x 3*n_atom x n_des
    def get_xe_sum() # n_coeff
    def get_xf_sum() # 3*n_atom x n_coeff

